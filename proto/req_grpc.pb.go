// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/req.proto

package req

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageHandlerClient is the client API for MessageHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageHandlerClient interface {
	// Sends a greeting
	GetPhrase(ctx context.Context, in *PhraseRequest, opts ...grpc.CallOption) (*PhraseReply, error)
}

type messageHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageHandlerClient(cc grpc.ClientConnInterface) MessageHandlerClient {
	return &messageHandlerClient{cc}
}

func (c *messageHandlerClient) GetPhrase(ctx context.Context, in *PhraseRequest, opts ...grpc.CallOption) (*PhraseReply, error) {
	out := new(PhraseReply)
	err := c.cc.Invoke(ctx, "/bad_msg_handler.MessageHandler/getPhrase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageHandlerServer is the server API for MessageHandler service.
// All implementations must embed UnimplementedMessageHandlerServer
// for forward compatibility
type MessageHandlerServer interface {
	// Sends a greeting
	GetPhrase(context.Context, *PhraseRequest) (*PhraseReply, error)
	mustEmbedUnimplementedMessageHandlerServer()
}

// UnimplementedMessageHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedMessageHandlerServer struct {
}

func (UnimplementedMessageHandlerServer) GetPhrase(context.Context, *PhraseRequest) (*PhraseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhrase not implemented")
}
func (UnimplementedMessageHandlerServer) mustEmbedUnimplementedMessageHandlerServer() {}

// UnsafeMessageHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageHandlerServer will
// result in compilation errors.
type UnsafeMessageHandlerServer interface {
	mustEmbedUnimplementedMessageHandlerServer()
}

func RegisterMessageHandlerServer(s grpc.ServiceRegistrar, srv MessageHandlerServer) {
	s.RegisterService(&MessageHandler_ServiceDesc, srv)
}

func _MessageHandler_GetPhrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageHandlerServer).GetPhrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bad_msg_handler.MessageHandler/getPhrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageHandlerServer).GetPhrase(ctx, req.(*PhraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageHandler_ServiceDesc is the grpc.ServiceDesc for MessageHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bad_msg_handler.MessageHandler",
	HandlerType: (*MessageHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPhrase",
			Handler:    _MessageHandler_GetPhrase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/req.proto",
}
